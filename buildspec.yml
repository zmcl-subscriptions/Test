version: 0.2


phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR...
      - aws --version
      - echo Logging in to Amazon ECR...
      - aws --version
      - aws ecr get-login-password --region ap-south-1 | docker login --username AWS --password-stdin 718826639302.dkr.ecr.ap-south-1.amazonaws.com
      - REPOSITORY_URI=718826639302.dkr.ecr.ap-south-1.amazonaws.com/sach-core-service-repo
      - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
      - IMAGE_TAG=build-$(echo $CODEBUILD_BUILD_ID | awk -F":" '{print $2}')
      - CONTAINER_NAME=SachCoreServiceContainer
      - ContainerName="SachCoreServiceContainer"
  build:
    commands:
      - echo Build started on `date`
      - echo Building the Docker image...
      - docker build -t $REPOSITORY_URI:latest .
      - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG
      - docker push $REPOSITORY_URI:latest
      - docker push $REPOSITORY_URI:$IMAGE_TAG
      - apt-get install jq -y
      - ImageURI=$(cat imageDetail.json | jq -r '.ImageURI')
      - printf '[{"name":"CONTAINER_NAME","imageUri":"IMAGE_URI"}]' > imagedefinitions.json
      - sed -i -e "s|CONTAINER_NAME|$ContainerName|g" imagedefinitions.json
      - sed -i -e "s|IMAGE_URI|$ImageURI|g" imagedefinitions.json
      - cat imagedefinitions.json
  post_build:
    commands:
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URI:$IMAGE_TAG > imagedefinitions.json
artifacts:
    files: imagedefinitions.json
# version: 0.2
# phases: 
# #   install:
# #     runtime-versions:
# #         docker: 18     
# #     commands: 
# #       - nohup /usr/local/bin/dockerd --host=unix:///var/run/docker.sock --host=tcp://127.0.0.1:2375 --storage-driver=overlay2&
# #       - timeout 15 sh -c "until docker info; do echo .; sleep 1; done"
#   pre_build: 
#     commands: 
#     - echo Logging in to Amazon ECR.... 
#     - aws --version
#     # update the following line with your own region
#     - $(aws ecr get-login --no-include-email --region ap-south-1)
#     - COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)
#     - IMAGE_TAG=${COMMIT_HASH:=latest}
#     - REPOSITORY_URI=718826639302.dkr.ecr.ap-south-1.amazonaws.com/sach-core-service-repo
#   build: 
#     commands: 
#     - echo Build started on `date` 
#     - echo Building the Docker image... 
#     # update the following line with the name of your own ECR repository
#     - docker build -t $REPOSITORY_URI:latest .
#     # update the following line with the URI of your own ECR repository (view the Push Commands in the console)
#     - docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG 
#     - apt-get install jq -y
#     - ContainerName="SachClientBackendServiceContainer"
#     - ImageURI=$(cat imageDetail.json | jq -r '.ImageURI')
#     - printf '[{"name":"CONTAINER_NAME","imageUri":"IMAGE_URI"}]' > imagedefinitions.json
#     - sed -i -e "s|CONTAINER_NAME|$ContainerName|g" imagedefinitions.json
#     - sed -i -e "s|IMAGE_URI|$ImageURI|g" imagedefinitions.json
#     - cat imagedefinitions.json
#   post_build: 
#     commands: 
#     - echo Build completed on `date` 
#     - echo pushing to repo
#     # update the following line with the URI of your own ECR repository
#     - docker push $REPOSITORY_URI:latest
#     - docker push $REPOSITORY_URI:$IMAGE_TAG
#     - echo Writing image definitions file... 
#     # - printf '[{"ImageURI":"%s"}]' $REPOSITORY_URI:$IMAGE_TAG > imageDetail.json
#     # - printf '{"ImageURI":"%s"}' $REPOSITORY_URI:$IMAGE_TAG > imageDetail.json
# artifacts:
#   files:
#     - imageDetail.json

# # Do not change version. This is the version of aws buildspec, not the version of your buldspec file.
# version: 0.2

# phases:
#   install:
#     runtime-versions:
#       nodejs: 16
#     commands:
#       - echo Installing Mocha...
#       - npm install
#   pre_build:
#     commands:
#       - echo Installing source NPM dependencies...
# #       - npm install
# #       - npm install unit.js
#   build:
#     commands:
#       - echo Build started on `date`
#       - echo Compiling the Node.js code
#       - npm run start
#   post_build:
#     commands:
#       - echo Build completed on `date`
# # Include only the files required for your application to run.
# # Do not use recursively include artifacts from node_modules directory as it will include unnecessary packages 
# # used only for building and testing.
# # ExpressJS apps will need other artifact directories included (bin/*, public/*, routes/*, views/* etc).
# artifacts:
#   files:
#     - app.js
#     - index.html
#     - package.json
#     - node_modules/async/*
#     - node_modules/lodash/*
